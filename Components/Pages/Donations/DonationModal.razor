@using Donate.Components.Pages.Projects
@using Donate.Components.Pages.Users
@using Donate.Data.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using System.Text
@using System.Text.Encodings.Web
@using System.Security.Claims
@inject NavigationManager NavigationManager

<EditForm Model="_Donation" OnvalidSubmit="OnSave">
    <DataAnnotationsValidator />
    <FormValidation @ref="FormValidation" />

    <div class="mb-3">
        <label for="Input.Donor" class="mb-2 text-muted">Donor</label>
        <AuthorizeView Roles="Admin" Context="userContext">
            <Authorized>
                <SelectDonor Value="_Donation.DonorId" ValueExpression="@(() => _Donation.DonorId)" ValueChanged="OnDonorChanged" />
            </Authorized>
        </AuthorizeView>
        <AuthorizeView Roles="Donor" Context="userContext">
            <Authorized>
                <input type="text" value="@(_Donation.Donor?.Name)" disabled class="form-control" />
            </Authorized>
        </AuthorizeView>
        <ValidationMessage For="() => _Donation.DonorId" />
    </div>
    <div class="mb-3">
        <label for="Input.Notes" class="mb-2 text-muted">Notes</label>
        <InputTextArea @bind-Value="_Donation.Notes" id="Input.Notes" class="form-control" placeholder="Notes here..." rows="3" />
        <ValidationMessage For="() => _Donation.Notes" />
    </div>

    <table>
        <thead>
            <tr>
                <th>Project</th>
                <th>Item</th>
                <th>Price</th>
                <th>Qty</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @if (_Donation.Details.Any())
            {
                foreach (var item in _Donation.Details)
                {
                    <tr>
                        <th><SelectProject Value="@item.ProjectId" ValueExpression="@(() => item.ProjectId)" ValueChanged="@((id) => OnProjectChanged(item, id))" /></th>
                        <th><SelectDonationItem Items="@Items" OnItemSelected="OnItemSelected" /></th>
                        <th>@($"{item.DonationItem?.Price:C2}")</th>
                        <th>@($"{item.Qty:N}")</th>
                        <th>@($"{((item.DonationItem?.Price ?? 0) * item.Qty):C2}")</th>
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="100"><div class="text-center text-muted">No donation items</div></td></tr>
            }
        </tbody>
    </table>

    <div class="align-items-center d-flex">
        <button type="submit" class="btn btn-primary mx-auto px-5">@(_Donation.Id == 0 ? "Add" : "Update")</button>
    </div>
</EditForm>

@code {
    [Parameter] public Donation Donation { get; set; } = new();
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = default!;
    private Donation _Donation = new();
    FormValidation FormValidation = default!;
    ClaimsPrincipal? User;
    DonationItem[] Items = [];

    protected override async void OnInitialized()
    {
        var auth = await Auth.GetAuthenticationStateAsync();
        User = auth.User;

        using var db = await ContextFactory.CreateDbContextAsync();
        if (Donation.Id == 0)
        {
            Donation.Donor = await db.Users.FirstOrDefaultAsync(x => x.Id == User.Id());
            Donation.DonorId = Donation.Donor?.Id ?? 0;
        }
        else
        {
            var donation = await db.Projects.FirstOrDefaultAsync(x => x.Id == Donation.Id);
            if (donation == null)
            {
                await ModalInstance.CloseAsync(ModalResult.Cancel("NotFound"));
                return;
            }
            else
            {
                Donation = donation.Clone<Donation>()!;
            }
        }

        _Donation = Donation.Clone()!;

        StateHasChanged();
    }

    async Task OnSave()
    {
        var errors = new Dictionary<string, List<string>>();
        FormValidation.ClearErrors();

        using var db = await ContextFactory.CreateDbContextAsync();

        try
        {
            if (_Donation.Id == 0)
            {
                var newDonation = new Donation { Notes = _Donation.Notes?.Trim(), };
                await db.Donations.AddAsync(newDonation);
                await db.SaveChangesAsync();

                await ModalInstance.CloseAsync(ModalResult.Ok());
            }
            else
            {
                var donationInDb = await db.Donations.FirstOrDefaultAsync(x => x.Id == _Donation.Id);
                if (donationInDb == null)
                {
                    await ModalInstance.CloseAsync(ModalResult.Cancel("NotFound"));
                    return;
                }
                else
                {
                    donationInDb.Notes = _Donation.Notes?.Trim();

                    db.Donations.Update(donationInDb);
                    await db.SaveChangesAsync();

                    await ModalInstance.CloseAsync(ModalResult.Ok());
                }
            }
        }
        catch (Exception ex)
        {
            ToastSrv.ShowError(ex.Message);
        }
    }

    async Task OnDonorChanged(int id)
    {
        using var db = await ContextFactory.CreateDbContextAsync();
        _Donation.DonorId = id;
        _Donation.Donor = await db.Users.FirstOrDefaultAsync(x => x.Id == id);
    }

    async Task OnProjectChanged(DonationDetail item, int id)
    {
        using var db = await ContextFactory.CreateDbContextAsync();
        item.ProjectId = id;
        item.Project = await db.Projects.FirstOrDefaultAsync(x => x.Id == id);
        Items = await db.DonationItems.Where(x => x.ProjectId == id).ToArrayAsync();
    }

    async Task OnItemSelected()
    {

    }
}