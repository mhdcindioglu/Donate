@using Donate.Data.Entities
@using Microsoft.AspNetCore.Identity
@using System.Diagnostics.CodeAnalysis
@inherits InputSelect<int>

<InputSelect TValue="int" Value="@Value" ValueExpression="@(() => Value)" ValueChanged="OnValueChanged" class="@(IsValid ? "form-select valid" : "form-select invalid")">
@*     @foreach (var donation in Donations.OrderBy(x => x.77))
    {
        <option value="@(donation.Id)">@donation.Donor</option>
    }
 *@</InputSelect>
@code {
    Donation[] Donations = [];

    protected override async Task OnInitializedAsync()
    {
        using var db = await ContextFactory.CreateDbContextAsync();
        Donations = await db.Donations.Where(x => x.Active == true).ToArrayAsync();
        
        if (Value == 0)
            await OnValueChanged(Donations.FirstOrDefault()?.Id ?? 0);
    }

    private bool IsValid => !EditContext.GetValidationMessages(FieldIdentifier).Any();

    async Task OnValueChanged(int value)
    {
        Value = value;
        await ValueChanged.InvokeAsync(value);
        EditContext.NotifyFieldChanged(FieldIdentifier);
    }
}
