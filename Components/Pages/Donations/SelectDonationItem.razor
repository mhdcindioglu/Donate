@using Donate.Data.Entities
@using Microsoft.AspNetCore.Identity
@using System.Diagnostics.CodeAnalysis
@inherits InputSelect<DonationItem>

<InputSelect TValue="DonationItem" Value="@Value" ValueExpression="@(() => Value)" ValueChanged="ItemSelected" class="@(IsValid ? "form-select valid" : "form-select invalid")">
    @foreach (var item in Items)
    {
        <option value="@(item.Id)">@item.Details</option>
    }
</InputSelect>
@code {
    [Parameter] public DonationItem? SelectedItem { get; set; }
    [Parameter] public DonationItem[] Items { get; set; } = [];
    [Parameter] public EventCallback<DonationItem> OnItemSelected { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (SelectedItem == null && Items.Any())
        {
            await ItemSelected(Items.First());
        }
    }

    private bool IsValid => !EditContext.GetValidationMessages(FieldIdentifier).Any();

    async Task ItemSelected(DonationItem item)
    {
        SelectedItem = item;
        await OnItemSelected.InvokeAsync(item);
        EditContext.NotifyFieldChanged(FieldIdentifier);
    }
}
