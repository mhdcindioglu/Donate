@using Donate.Data.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using System.Linq.Dynamic.Core

<div class="header mb-3">
    <h1 class="header-title">Donations list</h1>
    <div class="header-btns">
        <AuthorizeView Roles="Admin, Donor, Organizaton">
            <Authorized>
                <button class="btn btn-link me-1" @onclick="OnStateChanged">
                    @if (showDisactive)
                    {
                        <span class="text-success"><i class="fa-solid fa-eye fa-xl"></i></span>
                    }
                    else
                    {
                        <span class="text-muted"><i class="fa-solid fa-eye-slash fa-xl"></i></span>
                    }
                </button>
            </Authorized>
        </AuthorizeView>
        <button class="btn btn-primary me-1" @onclick="Refresh"><i class="fa-solid fa-rotate"></i></button>
        <AuthorizeView Roles="Admin, Donor">
            <Authorized>
                <button class="btn btn-success" @onclick="NewDonation"><i class="fa-solid fa-plus"></i></button>
            </Authorized>
        </AuthorizeView>
    </div>
</div>

<RadzenDataGrid @ref="DG" AllowFiltering="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true"
                Data="@donations" @bind-Value=@selectedDonations LoadData="LoadData" IsLoading="isLoading" RowSelect="OnDonationSelected" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Count="@count" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(ViewDonation.DonationDate)" Title="Date" Width="auto" FormatString="yyyy/MM/dd" TextAlign="TextAlign.Start" />
        <RadzenDataGridColumn Property="@nameof(ViewDonation.Donor)" Title="Donor" Width="auto" TextAlign="TextAlign.Start" />
        <RadzenDataGridColumn Property="@nameof(ViewDonation.Notes)" Title="Description" Width="auto" TextAlign="TextAlign.Start" />
        <RadzenDataGridColumn Property="@nameof(ViewDonation.Rows)" Title="Rows" Width="auto" TextAlign="TextAlign.End" />
        <RadzenDataGridColumn Property="@nameof(ViewDonation.Qty)" Title="Qty" Width="auto" TextAlign="TextAlign.End" />
        <RadzenDataGridColumn Property="@nameof(ViewDonation.Total)" Title="Total" FormatString="C2" Width="auto" TextAlign="TextAlign.End" />
        <RadzenDataGridColumn Filterable="false" Sortable="false" Width="90px" TextAlign="TextAlign.Center">
            <Template Context="donation">
                <AuthorizeView Roles="Admin">
                    <Authorized>
                        <div Class="text-nowrap text-center">
                            @if (donation.Active == true)
                            {
                                <button class="btn btn-link text-primary btn-sm small px-1 py-0 me-2" @onclick="@(async() => await EditDonation(donation))" title="Update"><i class="fa-solid fa-pen-to-square"></i></button>
                                <button class="btn btn-link text-muted btn-sm px-1 py-0 small" @onclick="@(async() => await DisActive(donation))" title="Disactive"><i class="fa-regular fa-square"></i></button>
                            }
                            else
                            {
                                <button class="btn btn-link text-success btn-sm px-1 py-0 small" @onclick="@(async() => await Active(donation))" title="Active"><i class="fa-regular fa-square-check"></i></button>
                            }
                        </div>
                    </Authorized>
                </AuthorizeView>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    [Parameter] public EventCallback<ViewDonation> OnDonationSelected { get; set; }
    List<ViewDonation> donations = [];
    IList<ViewDonation> selectedDonations = [];
    private ClaimsPrincipal CurUser = default!;
    private RadzenDataGrid<ViewDonation> DG = default!;
    bool isLoading;
    int count;
    bool showDisactive;
    ClaimsPrincipal? User;

    override protected async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var auth = await Auth.GetAuthenticationStateAsync();
        CurUser = auth.User;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await DG.Reload();
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        using var db = await ContextFactory.CreateDbContextAsync();
        var query = db.ViewDonations.Where(x => showDisactive || (showDisactive || x.Active == true)).AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
            query = query.Where(args.Filter);

        if (!string.IsNullOrEmpty(args.OrderBy))
            query = query.OrderBy(args.OrderBy);

        count = query.Count();

        donations = query.Skip(args.Skip!.Value).Take(args.Top!.Value).ToList();

        if (donations.Count > 0 && selectedDonations.Count == 0)
        {
            selectedDonations = new List<ViewDonation> { donations.First() };
            await OnDonationSelected.InvokeAsync(donations.First());
        }

        isLoading = false;
    }

    async Task Refresh() => await DG.Reload();

    async Task NewDonation()
    {
        var modal = Modal.Show<DonationModal>("New donation", new ModalOptions { DisableBackgroundCancel = false, Size = ModalSize.Large });
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            ToastSrv.ShowSuccess($"A new donation has added.");
            await Refresh();
        }
    }

    async Task EditDonation(ViewDonation donation)
    {
        var parameters = new ModalParameters() { { nameof(DonationModal.Donation), new Donation { Id = donation.Id } } };
        var modal = Modal.Show<DonationModal>("Update donation", parameters, new ModalOptions { DisableBackgroundCancel = false, Size = ModalSize.Large, });
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            if (result.Data?.ToString() == "NotFound")
                ToastSrv.ShowInfo("This donation is not found.");

            ToastSrv.ShowSuccess($"This donation has updated.");
            await Refresh();
        }
    }

    async Task DisActive(ViewDonation donation) => await UserActive(donation, false);
    async Task Active(ViewDonation donation) => await UserActive(donation, true);

    async Task UserActive(ViewDonation donation, bool state)
    {
        using var db = await ContextFactory.CreateDbContextAsync();
        var donationInDb = await db.Donations.FirstOrDefaultAsync(x => x.Id == donation.Id);
        if (donationInDb == null)
            ToastSrv.ShowInfo("This donation is not found.");
        else
        {
            donationInDb.Active = state;
            db.Donations.Update(donationInDb);
            await db.SaveChangesAsync();
            ToastSrv.ShowSuccess($"This donation has {(state ? "activated" : "disactivated")}.");
        }

        await Refresh();
    }

    async Task OnStateChanged()
    {
        showDisactive = !showDisactive;
        await DG.Reload();
    }
}
